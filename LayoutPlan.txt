// package.json
{
  "name": "fantasy-name-api",
  "version": "1.0.0",
  "main": "dist/server.js",
  "scripts": {
    "dev": "ts-node-dev --respawn src/server.ts",
    "build": "tsc",
    "start": "node dist/server.js",
    "seed": "ts-node src/seedDatabase.ts"
  },
  "dependencies": {
    "express": "^4.18.2",
    "oracledb": "^6.0.3",
    "dotenv": "^16.3.1",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "@types/node": "^20.10.5",
    "@types/cors": "^2.8.17",
    "typescript": "^5.3.3",
    "ts-node": "^10.9.2",
    "ts-node-dev": "^2.0.0"
  }
}

// tsconfig.json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}

// .env
DB_USER=your_oracle_user
DB_PASSWORD=your_oracle_password
DB_CONNECTION_STRING=localhost:1521/XEPDB1
PORT=3000

// src/types.ts
export interface FantasyName {
  id: number;
  name: string;
  gender: 'male' | 'female' | 'neutral';
  origin?: string;
}

export interface NameRequest {
  gender?: 'male' | 'female' | 'neutral' | 'any';
  count?: number;
  origin?: string;
}

export interface NameResponse {
  names: string[];
  gender: string;
  count: number;
  origin?: string;
}

// src/database.ts
import oracledb from 'oracledb';
import dotenv from 'dotenv';

dotenv.config();

export class Database {
  private static instance: Database;
  private pool: oracledb.Pool | null = null;

  private constructor() {}

  public static getInstance(): Database {
    if (!Database.instance) {
      Database.instance = new Database();
    }
    return Database.instance;
  }

  public async initialize(): Promise<void> {
    try {
      this.pool = await oracledb.createPool({
        user: process.env.DB_USER,
        password: process.env.DB_PASSWORD,
        connectString: process.env.DB_CONNECTION_STRING,
        poolMin: 2,
        poolMax: 10,
        poolIncrement: 1,
        poolTimeout: 300
      });
      
      console.log('Database pool created successfully');
      await this.createTables();
    } catch (error) {
      console.error('Database initialization failed:', error);
      throw error;
    }
  }

  private async createTables(): Promise<void> {
    const connection = await this.getConnection();
    try {
      // Create table if it doesn't exist
      await connection.execute(`
        CREATE TABLE fantasy_names (
          id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR2(100) NOT NULL,
          gender VARCHAR2(10) CHECK (gender IN ('male', 'female', 'neutral')),
          origin VARCHAR2(50),
          created_date DATE DEFAULT SYSDATE
        )
      `);
      
      // Create index
      await connection.execute(`
        CREATE INDEX idx_fantasy_names_gender ON fantasy_names(gender)
      `);
      
      console.log('Tables created successfully');
    } catch (error: any) {
      // Table might already exist
      if (error.errorNum !== 955) { // ORA-00955: name is already used
        console.error('Error creating tables:', error);
      }
    } finally {
      await connection.close();
    }
  }

  public async getConnection(): Promise<oracledb.Connection> {
    if (!this.pool) {
      throw new Error('Database pool not initialized');
    }
    return await this.pool.getConnection();
  }

  public async close(): Promise<void> {
    if (this.pool) {
      await this.pool.close();
      this.pool = null;
    }
  }
}

// src/nameService.ts
import { Database } from './database';
import { FantasyName, NameRequest, NameResponse } from './types';

export class NameService {
  private db: Database;

  constructor() {
    this.db = Database.getInstance();
  }

  public async getRandomNames(request: NameRequest): Promise<NameResponse> {
    const { gender = 'any', count = 1, origin } = request;
    
    if (count > 50) {
      throw new Error('Maximum 50 names per request');
    }

    const connection = await this.db.getConnection();
    
    try {
      let whereClause = '';
      const binds: (string | number)[] = [];
      
      if (gender !== 'any') {
        whereClause = 'WHERE (gender = :1 OR gender = \'neutral\')';
        binds.push(gender);
      }
      
      if (origin) {
        whereClause += whereClause ? ' AND origin = :2' : 'WHERE origin = :1';
        binds.push(origin);
      }
      
      binds.push(count);
      
      const query = `
        SELECT name FROM (
          SELECT name FROM fantasy_names 
          ${whereClause}
          ORDER BY DBMS_RANDOM.VALUE
        ) WHERE ROWNUM <= :${binds.length}
      `;

      const result = await connection.execute(query, binds);
      
      const names = (result.rows as any[])?.map(row => row[0]) || [];
      
      return {
        names,
        gender: gender,
        count: names.length,
        origin
      };
    } finally {
      await connection.close();
    }
  }

  public async addName(name: FantasyName): Promise<void> {
    const connection = await this.db.getConnection();
    
    try {
      await connection.execute(
        `INSERT INTO fantasy_names (name, gender, origin) VALUES (:1, :2, :3)`,
        [name.name, name.gender, name.origin || null],
        { autoCommit: true }
      );
    } finally {
      await connection.close();
    }
  }

  public async getStats(): Promise<any> {
    const connection = await this.db.getConnection();
    
    try {
      const result = await connection.execute(`
        SELECT gender, COUNT(*) as count 
        FROM fantasy_names 
        GROUP BY gender
      `);
      
      return result.rows;
    } finally {
      await connection.close();
    }
  }
}

// src/routes/nameRoutes.ts
import { Router, Request, Response } from 'express';
import { NameService } from '../nameService';
import { NameRequest } from '../types';

const router = Router();
const nameService = new NameService();

// Get random fantasy names
router.get('/random', async (req: Request, res: Response) => {
  try {
    const request: NameRequest = {
      gender: req.query.gender as any,
      count: req.query.count ? parseInt(req.query.count as string) : 1,
      origin: req.query.origin as string
    };

    const result = await nameService.getRandomNames(request);
    res.json(result);
  } catch (error: any) {
    res.status(400).json({ error: error.message });
  }
});

// Get API statistics
router.get('/stats', async (req: Request, res: Response) => {
  try {
    const stats = await nameService.getStats();
    res.json({ stats });
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
});

// Add a new name (for testing/admin)
router.post('/add', async (req: Request, res: Response) => {
  try {
    const { name, gender, origin } = req.body;
    
    if (!name || !gender) {
      return res.status(400).json({ error: 'Name and gender are required' });
    }

    await nameService.addName({ id: 0, name, gender, origin });
    res.json({ message: 'Name added successfully' });
  } catch (error: any) {
    res.status(500).json({ error: error.message });
  }
});

export default router;

// src/server.ts
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { Database } from './database';
import nameRoutes from './routes/nameRoutes';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use('/api/names', nameRoutes);

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'OK', timestamp: new Date().toISOString() });
});

// Error handling middleware
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(err.stack);
  res.status(500).json({ error: 'Something went wrong!' });
});

// Start server
async function startServer() {
  try {
    // Initialize database
    const db = Database.getInstance();
    await db.initialize();
    
    app.listen(PORT, () => {
      console.log(`Fantasy Name API server running on port ${PORT}`);
      console.log(`Health check: http://localhost:${PORT}/health`);
      console.log(`Random names: http://localhost:${PORT}/api/names/random?gender=female&count=3`);
    });
  } catch (error) {
    console.error('Failed to start server:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nShutting down gracefully...');
  const db = Database.getInstance();
  await db.close();
  process.exit(0);
});

startServer();

// src/seedDatabase.ts
import { Database } from './database';
import { NameService } from './nameService';

const SAMPLE_NAMES = {
  male: [
    'Aelric', 'Bjorn', 'Caelum', 'Darian', 'Eamon', 'Gareth', 'Hadrian', 'Icarus',
    'Jaxon', 'Kael', 'Lyonel', 'Magnus', 'Nolan', 'Orion', 'Percival', 'Quinton',
    'Ragnar', 'Soren', 'Thaddeus', 'Ulric', 'Varian', 'Wren', 'Xander', 'Yorick', 'Zephyr',
    'Aldric', 'Bane', 'Corvus', 'Draven', 'Elias', 'Fenris', 'Gideon', 'Hawke',
    'Ivan', 'Joren', 'Kyran', 'Leander', 'Malachar', 'Nero', 'Oberon', 'Phoenix'
  ],
  female: [
    'Aeliana', 'Brenna', 'Celeste', 'Dara', 'Elara', 'Freya', 'Gwendolyn', 'Hazel',
    'Iris', 'Jenna', 'Kira', 'Luna', 'Mira', 'Nyx', 'Ophelia', 'Penny',
    'Quinn', 'Raven', 'Sera', 'Tara', 'Una', 'Vera', 'Willa', 'Xara', 'Yara', 'Zara',
    'Aria', 'Bella', 'Cora', 'Diana', 'Eva', 'Fiona', 'Grace', 'Helena',
    'Isla', 'Jade', 'Kara', 'Lila', 'Maya', 'Nova', 'Opal', 'Piper'
  ],
  neutral: [
    'Ash', 'Bay', 'Cedar', 'Dale', 'Echo', 'Frost', 'Grey', 'Haven',
    'Indigo', 'Jade', 'Kit', 'Lane', 'Moon', 'North', 'Ocean', 'Phoenix',
    'Quest', 'River', 'Sage', 'True', 'Vale', 'West', 'Fox', 'Yarn', 'Zen',
    'Arrow', 'Brook', 'Cloud', 'Dawn', 'Ember'
  ]
};

async function seedDatabase() {
  try {
    console.log('Starting database seeding...');
    
    const db = Database.getInstance();
    await db.initialize();
    
    const nameService = new NameService();
    
    // Seed male names
    for (const name of SAMPLE_NAMES.male) {
      await nameService.addName({
        id: 0,
        name,
        gender: 'male',
        origin: 'fantasy'
      });
    }
    
    // Seed female names
    for (const name of SAMPLE_NAMES.female) {
      await nameService.addName({
        id: 0,
        name,
        gender: 'female',
        origin: 'fantasy'
      });
    }
    
    // Seed neutral names
    for (const name of SAMPLE_NAMES.neutral) {
      await nameService.addName({
        id: 0,
        name,
        gender: 'neutral',
        origin: 'fantasy'
      });
    }
    
    console.log('Database seeded successfully!');
    console.log(`Added ${SAMPLE_NAMES.male.length} male names`);
    console.log(`Added ${SAMPLE_NAMES.female.length} female names`);
    console.log(`Added ${SAMPLE_NAMES.neutral.length} neutral names`);
    
    await db.close();
  } catch (error) {
    console.error('Seeding failed:', error);
    process.exit(1);
  }
}

// Run seeding if this file is executed directly
if (require.main === module) {
  seedDatabase();
}

// README.md content:
/*
# Fantasy Name Generator API

A TypeScript-based REST API for generating fantasy names with Oracle database backend.

## Setup

1. Install dependencies:
   ```bash
   npm install
   ```

2. Configure Oracle database connection in `.env`:
   ```
   DB_USER=your_oracle_user
   DB_PASSWORD=your_oracle_password
   DB_CONNECTION_STRING=localhost:1521/XEPDB1
   PORT=3000
   ```

3. Seed the database:
   ```bash
   npm run seed
   ```

4. Start development server:
   ```bash
   npm run dev
   ```

## API Endpoints

### Get Random Names
```
GET /api/names/random?gender=female&count=3&origin=fantasy
```

Parameters:
- `gender`: male, female, neutral, any (default: any)
- `count`: number of names (1-50, default: 1)
- `origin`: filter by origin (optional)

### Get Statistics
```
GET /api/names/stats
```

### Add Name (Admin)
```
POST /api/names/add
Content-Type: application/json

{
  "name": "Aelindra",
  "gender": "female",
  "origin": "elvish"
}
```

## Example Usage

```bash
# Get 3 female fantasy names
curl "http://localhost:3000/api/names/random?gender=female&count=3"

# Get any gender name
curl "http://localhost:3000/api/names/random"

# Check API health
curl "http://localhost:3000/health"
```

## Production Build

```bash
npm run build
npm start
```
*/